/*
R-3.2 Suppose that two entries of an array A are equal to each other. After running the insertion-sort algorithm of Code Fragment 3.7, will they appear
in the same relative order in the final sorted order or in reverse order?
Explain your answer.
*/

void insertion_sort(T* arr, int n)
{
    int i,j;
    T current;
    for ( i = 1; i<n ; i++)
    {
        current = arr[i];
        j = i -1;
        while((j >= 0) && (arr[j] > current))
        {
            arr[j + 1]  = arr[j];
            j--;
        }
        arr[j + 1] = current;
    }
}

6,4,4,2,2,7,9

first iteration - 
 i =1 j = 0
 current = 4
 j >=0 && a[0] > a[1] = 6 > 4 = true
a[1] = a[0];

array = 6,6,4,2,2,7,9
a[i] = 4
array = 4,6,4,2,2,7,9

j=-1
2) Second i iteration 
i = 2 j = 1
current  = a[2] = 4
while(1 >= 0 && a[1] > a[2]) : 6 > 4 true
a[2] = a[1]
j = 0
array = 4,6,6,2,2,7,9
while(0 >=0 && a[0] > 4 ) : false
array[1] = 4
4,4,6,2,2,7,9

3)third I iteration
i = 3 ; j = 2
current  = a[3] = 2;
while(2 > = 0 && a[2] > 2  (6 > 2)) true
a[3]  = a[2]
4,4,6,6,2,7,9
j-- ;
j = 1;
while(1>= 0 && a[1] > 2 (4 > 2)) true
a[2] = a[1]
4,4,4,6,2,7,9
j -- 
j = 0
while(0 > =0 && a[0 ]> 2 (4>2))
a[1]  = a[0]
4,4,4,6,2,7,9
j-- 
j = -1
while(false)

a[0] = current
2,4,4,6,2,7,9

Hence they stay in there relative order

---------------------------------------------------------------------------------------------------------

R-3.12 Draw the recursion trace for the execution of function ReverseArray(A,0,4)
(Code Fragment 3.39) on array A = {4,3,6,2,5}.

recursion trace

Algorithm ReverseArray(A,i, j):
Input: An array A and nonnegative integer indices i and j
Output: The reversal of the elements in A starting at index i and ending at j
if i < j then
Swap A[i] and A[ j]
ReverseArray(A,i+1, j −1)
return

A = {4,3,6,2,5};
i = 0;
j = 5 -1 = 4
if(0 < 4)
    Swap(a[0],a[4]) = A = {5,3,6,2,4}
    ReverseArray(A,1,3);
        if(1 < 3)
            swap(a[1],a[3]) = A = {5,2,6,3,4}
            ReverseArray(A,2,2);
                if(2 < 2) = false;
                return

-------------------------------------------------------------------------------------------------

R-3.13 Draw the recursion trace for the execution of function PuzzleSolve(3,S,U)
(Code Fragment 3.44), where S is empty and U = {a,b,c,d}.

for each e in U do
Remove e from U {e is now being used}
Add e to the end of S
if k = 1 then
Test whether S is a configuration that solves the puzzle
if S solves the puzzle then
return “Solution found: ” S
else
PuzzleSolve(k−1,S,U)
Add e back to U {e is now unused}
Remove e from the end of S

                                    PuzzleSolve(3,{},{a,b,c,d})
                                                |
                                                |
        PuzzleSolve(2,a,{b,c,d}),       PuzzleSolve(2,b,{a,c,d})  ,         PuzzleSolve(2,c,{a,b,d})  ,         PuzzleSolve(2,d,{a,b,c})
            PuzzleSolve(1,ab,{c,d})         PuzzleSolve(1,ba,{c,d})             PuzzleSolve(1,ca,{b,d})             PuzzleSolve(1,da,{b,c})
            PuzzleSolve(1,ac,{b,d})         PuzzleSolve(1,bc,{a,d})             PuzzleSolve(1,cb,{a,d})             PuzzleSolve(1,db,{a,c})
            PuzzleSolve(1,ad,{b,c})         PuzzleSolve(1,bd,{a,c})             PuzzleSolve(1,cd,{a,b})             PuzzleSolve(1,dc,{a,b})
                


------------------------------------------------------------------------------------------------------------------------------------------

