C-3.3 Let A be an array of size n ≥ 2 containing integers from 1 to n−1, inclusive, with exactly one repeated. Describe a fast algorithm for finding the
integer in A that is repeated.

1)There are various approches to find the repeted element.

First Approach (Naive Approach)
-
running two for loops and comparing elements if there is any duplicate.

Second Approach - 

sorting the Array and Checking if two adjecent elements are equal.

Third Approach - 

Iterate through the array and put the element in Hashset. if the elemnt is Already in the hash set 
return that element.

Fourth approach - 

Iterate through the array 
1) put the arr[arr[i]] to negative .
2) if the value is positive make it negative if it is negative return the element.

---------------------------------------------------------------------------------------

C-3.7 Describe a fast recursive algorithm for reversing a singly linked list L, so
that the ordering of the nodes becomes opposite of what it was before.

ListNode* reverseList(ListNode* head) {
        if(head == NULL)
            return NULL;
        if(head->next ==NULL)
            return head;
        ListNode *i,*j,*k;
        i = head;
        j = head->next;
        if(head->next->next == NULL)
        {
             i->next = NULL;
            j->next = i;
            return j;
        }    
        k = head->next->next;
        i->next = NULL;
        j->next = i;
        i = j;
        j = k;
        k = k->next;
        while(k!= NULL)
        {
            j ->next = i;
            i = j;
            j = k;
            k = k->next;
        }
     
        j->next = i;
        return j;
        
    }

    -------------------------------------------------------------------------------------------
C-3.8 Describe a good algorithm for concatenating two singly linked lists L and
M, with header sentinels, into a single list L′
that contains all the nodes of
L followed by all the nodes of M.


Iteration to the last node of list one 

lastofListone -> next = head2;

return head1;

------------------------------------------------------------------------------------------------

C-3.9 Give a fast algorithm for concatenating two doubly linked lists L and M,
with header and trailer sentinel nodes, into a single list L

concatinationofList(DList* head1 , DList* head2)
{   
    Dlist* Iter = head1;
    while(Iter!= NULL)
    {
        iter = iter->next;
    }

    iter->prev->next = head2->next;
    head2->next->prev = iter->prev;
    iter->prev = NULL;
    head2->next = NULL;
    delete(iter);
    delete(head2);
    return head1;
}

-----------------------------------------------------------------------------------------------------

C-3.10 Describe in detail how to swap two nodes x and y (and not just their contents) in a singly linked list L given references only to x and y. Repeat
this exercise for the case when L is a doubly linked list. Which algorithm
takes more time?
For Singly linked list
swap(List& x, List& y)
{
    node* temp = x.next;
    iterarate to the prev element of x and y 
    store them in xprev and yprev;
    
    xprev->next = y;
    yprev->next = x;

    x.next = y.next;
    y.next = temp;
}

For Doubly linked list we will not have to iterate to the previous element of the nodes to be swapped

swap(DList& x, DList& y)
{
    node* temp = x.next;


    x.prev.next = y;
    y.prev.next = x;
    x.next = y.next;
    y.next = temp;
}

-----------------------------------------------------------------------------------------------------

C-3.11 Describe in detail an algorithm for reversing a singly linked list L using
only a constant amount of additional space and not using any recursion.

List* Reverse(List* head)
{
    if(head == NULL)
        return NULL;
    if(head->next == NULL)
        return head;
    List* i,j ,k ;
    i = head;
    j = head->next;

    if(head->next->next != NULL)
    {
        i ->next = NULL;
        j->next = i;
        return j;
    }
    k = head->next->next;
    i->next = next;
    j->next = i;
    i = j;
    j = k;
    k = k->next;
    while(k!= NULL)
    {
        j->next = i;
        i = j;
        j = k;
        k = k->next;
    }
    j->next = i;
    return j;
}


----------------------------------------
C-3.14 Describe a recursive algorithm that counts the number of nodes in a singly
linked list

algorithm
void (List* head, int * count)
{
    if(head->next != NULL)
    {
        (*count++);
        Size(head->next, count);
        return;

    }
    else{
        (*count)++;
    }
}

Also Implemented in Reinforcement exercise recursiveSinglyLinkedList.

